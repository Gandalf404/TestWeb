// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestAPI.Models;

#nullable disable

namespace TestAPI.Migrations
{
    [DbContext(typeof(InvoicesContext))]
    partial class InvoicesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestAPI.Models.BuildPlace", b =>
                {
                    b.Property<int>("BuildPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BuildPlaceId"));

                    b.Property<int>("KitId")
                        .HasColumnType("integer");

                    b.Property<int>("PartId")
                        .HasColumnType("integer");

                    b.HasKey("BuildPlaceId");

                    b.HasIndex("KitId");

                    b.HasIndex("PartId");

                    b.ToTable("BuildPlaces");
                });

            modelBuilder.Entity("TestAPI.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateOnly>("InvoiceFinishDate")
                        .HasColumnType("date");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("KitCount")
                        .HasColumnType("integer");

                    b.Property<int>("KitId")
                        .HasColumnType("integer");

                    b.Property<int>("PartCount")
                        .HasColumnType("integer");

                    b.Property<int>("PartId")
                        .HasColumnType("integer");

                    b.HasKey("InvoiceId");

                    b.HasIndex("KitId");

                    b.HasIndex("PartId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("TestAPI.Models.Kit", b =>
                {
                    b.Property<int>("KitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("KitId"));

                    b.Property<int>("KitCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("KitFinishDate")
                        .HasColumnType("date");

                    b.Property<string>("KitName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("KitId");

                    b.ToTable("Kits");
                });

            modelBuilder.Entity("TestAPI.Models.Part", b =>
                {
                    b.Property<int>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PartId"));

                    b.Property<int>("KitId")
                        .HasColumnType("integer");

                    b.Property<int>("PartCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("PartFinishDate")
                        .HasColumnType("date");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PartId");

                    b.HasIndex("KitId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("TestAPI.Models.BuildPlace", b =>
                {
                    b.HasOne("TestAPI.Models.Kit", "Kit")
                        .WithMany("BuildPlaces")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAPI.Models.Part", "Part")
                        .WithMany("BuildPlaces")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kit");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("TestAPI.Models.Invoice", b =>
                {
                    b.HasOne("TestAPI.Models.Kit", null)
                        .WithMany("Invoices")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAPI.Models.Part", null)
                        .WithMany("Invoices")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAPI.Models.Part", b =>
                {
                    b.HasOne("TestAPI.Models.Kit", "Kit")
                        .WithMany("Parts")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("TestAPI.Models.Kit", b =>
                {
                    b.Navigation("BuildPlaces");

                    b.Navigation("Invoices");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("TestAPI.Models.Part", b =>
                {
                    b.Navigation("BuildPlaces");

                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
